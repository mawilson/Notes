AWSTemplateFormatVersion: 2010-09-09
Description: >-
  notes-app
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  NotesUserpool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AliasAttributes:
        - email
        - preferred_username
      UserPoolName: !Sub ${AWS::StackName}-NotesUserpool
      AutoVerifiedAttributes:
        - email
  NotesUserPoolResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties: 
      UserPoolId: !Ref NotesUserpool 
      Identifier: "NotesUserPoolResourceServer" 
      Name: "notesScopes" 
      Scopes: 
      - ScopeName: "put" 
        ScopeDescription: "for PUTs" 
      - ScopeName: "post"
        ScopeDescription: "for POSTs"
      - ScopeName: "delete"
        ScopeDescription: "for DELETEs"
  NotesApi:
    Type: AWS::Serverless::Api
    Properties:
      Auth:
        Authorizers:
          NotesCognitoAuth:
            UserPoolArn:
              Fn::GetAtt:
                - NotesUserpool
                - Arn
            AuthorizationScopes:
              - put
              - post
              - delete
        DefaultAuthorizer: NotesCognitoAuth
      StageName: Prod

  # This is a Lambda function config associated with the source code: getNotes.mjs
  getNotes:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/getNotes.getNotesHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Does an HTTP GET on the root endpoint to get all notes the NoteTable
      Policies:
        # Give Create/Read/Update/Delete Permissions to the NotesTable
      - DynamoDBCrudPolicy:
          TableName: !Ref NotesTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE_NAME: !Ref NotesTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref NotesApi
            Path: /notes
            Method: GET
            Auth:
              Authorizer: NONE
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: getNote.mjs
  getNote:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/getNote.getNoteHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Does an HTTP GET on the /{id} endpoint to get a single note from the NoteTable
      Policies:
        # Give Create/Read/Update/Delete Permissions to the NotesTable
      - DynamoDBCrudPolicy:
          TableName: !Ref NotesTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE_NAME: !Ref NotesTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref NotesApi
            Path: /notes/{id}
            Method: GET
            Auth:
              Authorizer: NONE
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: putNote.mjs
  putNote:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/putNote.putNoteHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Does an HTTP PUT on the /{id} endpoint to update a matching note in the NoteTable
      Policies:
        # Give Create/Read/Update/Delete Permissions to the NotesTable
      - DynamoDBCrudPolicy:
          TableName: !Ref NotesTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE_NAME: !Ref NotesTable
          NOTESUSERPOOLCLIENT_USER_POOL_CLIENT_ID: !Ref NotesUserPoolClient
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref NotesApi
            Path: /notes/{id}
            Method: PUT

  # This is a Lambda function config associated with the source code: postNote.mjs
  postNote:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/postNote.postNoteHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Does an HTTP POST on the root endpoint to add a note to the NoteTable
      Policies:
        # Give Create/Read/Update/Delete Permissions to the NotesTable
      - DynamoDBCrudPolicy:
          TableName: !Ref NotesTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE_NAME: !Ref NotesTable
          NOTESUSERPOOLCLIENT_USER_POOL_CLIENT_ID: !Ref NotesUserPoolClient
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref NotesApi
            Path: /notes
            Method: POST

  # This is a Lambda function config associated with the source code: deleteNote.mjs
  deleteNote:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/deleteNote.deleteNoteHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Does an HTTP DELETE on the /{id} endpoint to delete a matching note from the NoteTable
      Policies:
        # Give Create/Read/Update/Delete Permissions to the NotesTable
      - DynamoDBCrudPolicy:
          TableName: !Ref NotesTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          TABLE_NAME: !Ref NotesTable
          NOTESUSERPOOLCLIENT_USER_POOL_CLIENT_ID: !Ref NotesUserPoolClient
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref NotesApi
            Path: /notes/{id}
            Method: DELETE

  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  NotesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'

  NotesUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref NotesUserpool
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - openid
        - aws.cognito.signin.user.admin
        - NotesUserPoolResourceServer/put
        - NotesUserPoolResourceServer/post
        - NotesUserPoolResourceServer/delete
      CallbackURLs:
        - https://oauth.pstmn.io/v1/browser-callback
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlows: 
        - code

  NotesUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref NotesUserpool
      Domain: notes-authority

Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${NotesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
# # More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true